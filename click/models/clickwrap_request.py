# coding: utf-8

"""
    DocuSign Click API

    DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClickwrapRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clickwrap_name': 'str',
        'display_settings': 'DisplaySettings',
        'documents': 'list[Document]',
        'fields_to_null': 'str',
        'is_majorversion': 'bool',
        'name': 'str',
        'require_reacceptance': 'bool',
        'scheduled_date': 'object',
        'scheduled_reacceptance': 'ClickwrapScheduledReacceptance',
        'status': 'object',
        'transfer_from_user_id': 'str',
        'transfer_to_user_id': 'str'
    }

    attribute_map = {
        'clickwrap_name': 'clickwrapName',
        'display_settings': 'displaySettings',
        'documents': 'documents',
        'fields_to_null': 'fieldsToNull',
        'is_majorversion': 'isMajorversion',
        'name': 'name',
        'require_reacceptance': 'requireReacceptance',
        'scheduled_date': 'scheduledDate',
        'scheduled_reacceptance': 'scheduledReacceptance',
        'status': 'status',
        'transfer_from_user_id': 'transferFromUserId',
        'transfer_to_user_id': 'transferToUserId'
    }

    def __init__(self, clickwrap_name=None, display_settings=None, documents=None, fields_to_null=None, is_majorversion=None, name=None, require_reacceptance=None, scheduled_date=None, scheduled_reacceptance=None, status=None, transfer_from_user_id=None, transfer_to_user_id=None):  # noqa: E501
        """ClickwrapRequest - a model defined in Swagger"""  # noqa: E501

        self._clickwrap_name = None
        self._display_settings = None
        self._documents = None
        self._fields_to_null = None
        self._is_majorversion = None
        self._name = None
        self._require_reacceptance = None
        self._scheduled_date = None
        self._scheduled_reacceptance = None
        self._status = None
        self._transfer_from_user_id = None
        self._transfer_to_user_id = None
        self.discriminator = None

        if clickwrap_name is not None:
            self.clickwrap_name = clickwrap_name
        if display_settings is not None:
            self.display_settings = display_settings
        if documents is not None:
            self.documents = documents
        if fields_to_null is not None:
            self.fields_to_null = fields_to_null
        if is_majorversion is not None:
            self.is_majorversion = is_majorversion
        if name is not None:
            self.name = name
        if require_reacceptance is not None:
            self.require_reacceptance = require_reacceptance
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if scheduled_reacceptance is not None:
            self.scheduled_reacceptance = scheduled_reacceptance
        if status is not None:
            self.status = status
        if transfer_from_user_id is not None:
            self.transfer_from_user_id = transfer_from_user_id
        if transfer_to_user_id is not None:
            self.transfer_to_user_id = transfer_to_user_id

    @property
    def clickwrap_name(self):
        """Gets the clickwrap_name of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The clickwrap_name of this ClickwrapRequest.  # noqa: E501
        :rtype: str
        """
        return self._clickwrap_name

    @clickwrap_name.setter
    def clickwrap_name(self, clickwrap_name):
        """Sets the clickwrap_name of this ClickwrapRequest.

          # noqa: E501

        :param clickwrap_name: The clickwrap_name of this ClickwrapRequest.  # noqa: E501
        :type: str
        """

        self._clickwrap_name = clickwrap_name

    @property
    def display_settings(self):
        """Gets the display_settings of this ClickwrapRequest.  # noqa: E501


        :return: The display_settings of this ClickwrapRequest.  # noqa: E501
        :rtype: DisplaySettings
        """
        return self._display_settings

    @display_settings.setter
    def display_settings(self, display_settings):
        """Sets the display_settings of this ClickwrapRequest.


        :param display_settings: The display_settings of this ClickwrapRequest.  # noqa: E501
        :type: DisplaySettings
        """

        self._display_settings = display_settings

    @property
    def documents(self):
        """Gets the documents of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The documents of this ClickwrapRequest.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ClickwrapRequest.

          # noqa: E501

        :param documents: The documents of this ClickwrapRequest.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def fields_to_null(self):
        """Gets the fields_to_null of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The fields_to_null of this ClickwrapRequest.  # noqa: E501
        :rtype: str
        """
        return self._fields_to_null

    @fields_to_null.setter
    def fields_to_null(self, fields_to_null):
        """Sets the fields_to_null of this ClickwrapRequest.

          # noqa: E501

        :param fields_to_null: The fields_to_null of this ClickwrapRequest.  # noqa: E501
        :type: str
        """

        self._fields_to_null = fields_to_null

    @property
    def is_majorversion(self):
        """Gets the is_majorversion of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The is_majorversion of this ClickwrapRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_majorversion

    @is_majorversion.setter
    def is_majorversion(self, is_majorversion):
        """Sets the is_majorversion of this ClickwrapRequest.

          # noqa: E501

        :param is_majorversion: The is_majorversion of this ClickwrapRequest.  # noqa: E501
        :type: bool
        """

        self._is_majorversion = is_majorversion

    @property
    def name(self):
        """Gets the name of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The name of this ClickwrapRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClickwrapRequest.

          # noqa: E501

        :param name: The name of this ClickwrapRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def require_reacceptance(self):
        """Gets the require_reacceptance of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The require_reacceptance of this ClickwrapRequest.  # noqa: E501
        :rtype: bool
        """
        return self._require_reacceptance

    @require_reacceptance.setter
    def require_reacceptance(self, require_reacceptance):
        """Sets the require_reacceptance of this ClickwrapRequest.

          # noqa: E501

        :param require_reacceptance: The require_reacceptance of this ClickwrapRequest.  # noqa: E501
        :type: bool
        """

        self._require_reacceptance = require_reacceptance

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The scheduled_date of this ClickwrapRequest.  # noqa: E501
        :rtype: object
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this ClickwrapRequest.

          # noqa: E501

        :param scheduled_date: The scheduled_date of this ClickwrapRequest.  # noqa: E501
        :type: object
        """

        self._scheduled_date = scheduled_date

    @property
    def scheduled_reacceptance(self):
        """Gets the scheduled_reacceptance of this ClickwrapRequest.  # noqa: E501


        :return: The scheduled_reacceptance of this ClickwrapRequest.  # noqa: E501
        :rtype: ClickwrapScheduledReacceptance
        """
        return self._scheduled_reacceptance

    @scheduled_reacceptance.setter
    def scheduled_reacceptance(self, scheduled_reacceptance):
        """Sets the scheduled_reacceptance of this ClickwrapRequest.


        :param scheduled_reacceptance: The scheduled_reacceptance of this ClickwrapRequest.  # noqa: E501
        :type: ClickwrapScheduledReacceptance
        """

        self._scheduled_reacceptance = scheduled_reacceptance

    @property
    def status(self):
        """Gets the status of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The status of this ClickwrapRequest.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClickwrapRequest.

          # noqa: E501

        :param status: The status of this ClickwrapRequest.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def transfer_from_user_id(self):
        """Gets the transfer_from_user_id of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The transfer_from_user_id of this ClickwrapRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_from_user_id

    @transfer_from_user_id.setter
    def transfer_from_user_id(self, transfer_from_user_id):
        """Sets the transfer_from_user_id of this ClickwrapRequest.

          # noqa: E501

        :param transfer_from_user_id: The transfer_from_user_id of this ClickwrapRequest.  # noqa: E501
        :type: str
        """

        self._transfer_from_user_id = transfer_from_user_id

    @property
    def transfer_to_user_id(self):
        """Gets the transfer_to_user_id of this ClickwrapRequest.  # noqa: E501

          # noqa: E501

        :return: The transfer_to_user_id of this ClickwrapRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_to_user_id

    @transfer_to_user_id.setter
    def transfer_to_user_id(self, transfer_to_user_id):
        """Sets the transfer_to_user_id of this ClickwrapRequest.

          # noqa: E501

        :param transfer_to_user_id: The transfer_to_user_id of this ClickwrapRequest.  # noqa: E501
        :type: str
        """

        self._transfer_to_user_id = transfer_to_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClickwrapRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClickwrapRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
