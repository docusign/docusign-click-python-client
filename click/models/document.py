# coding: utf-8

"""
    DocuSign Click API

    DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_base64': 'str',
        'document_html': 'str',
        'document_name': 'str',
        'file_extension': 'str',
        'order': 'int'
    }

    attribute_map = {
        'document_base64': 'documentBase64',
        'document_html': 'documentHtml',
        'document_name': 'documentName',
        'file_extension': 'fileExtension',
        'order': 'order'
    }

    def __init__(self, document_base64=None, document_html=None, document_name=None, file_extension=None, order=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501

        self._document_base64 = None
        self._document_html = None
        self._document_name = None
        self._file_extension = None
        self._order = None
        self.discriminator = None

        if document_base64 is not None:
            self.document_base64 = document_base64
        if document_html is not None:
            self.document_html = document_html
        if document_name is not None:
            self.document_name = document_name
        if file_extension is not None:
            self.file_extension = file_extension
        if order is not None:
            self.order = order

    @property
    def document_base64(self):
        """Gets the document_base64 of this Document.  # noqa: E501

          # noqa: E501

        :return: The document_base64 of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_base64

    @document_base64.setter
    def document_base64(self, document_base64):
        """Sets the document_base64 of this Document.

          # noqa: E501

        :param document_base64: The document_base64 of this Document.  # noqa: E501
        :type: str
        """

        self._document_base64 = document_base64

    @property
    def document_html(self):
        """Gets the document_html of this Document.  # noqa: E501

          # noqa: E501

        :return: The document_html of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_html

    @document_html.setter
    def document_html(self, document_html):
        """Sets the document_html of this Document.

          # noqa: E501

        :param document_html: The document_html of this Document.  # noqa: E501
        :type: str
        """

        self._document_html = document_html

    @property
    def document_name(self):
        """Gets the document_name of this Document.  # noqa: E501

          # noqa: E501

        :return: The document_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this Document.

          # noqa: E501

        :param document_name: The document_name of this Document.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    @property
    def file_extension(self):
        """Gets the file_extension of this Document.  # noqa: E501

          # noqa: E501

        :return: The file_extension of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this Document.

          # noqa: E501

        :param file_extension: The file_extension of this Document.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def order(self):
        """Gets the order of this Document.  # noqa: E501

          # noqa: E501

        :return: The order of this Document.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Document.

          # noqa: E501

        :param order: The order of this Document.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
