# coding: utf-8

"""
    DocuSign Click API

    DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserAgreementResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'agreed_on': 'object',
        'agreement_id': 'str',
        'agreement_url': 'str',
        'clickwrap_id': 'str',
        'client_user_id': 'str',
        'consumer_disclosure_html': 'str',
        'created_on': 'object',
        'declined_on': 'object',
        'documents': 'list[Document]',
        'metadata': 'str',
        'settings': 'DisplaySettings',
        'status': 'str',
        'version': 'str',
        'version_id': 'str',
        'version_number': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'agreed_on': 'agreedOn',
        'agreement_id': 'agreementId',
        'agreement_url': 'agreementUrl',
        'clickwrap_id': 'clickwrapId',
        'client_user_id': 'clientUserId',
        'consumer_disclosure_html': 'consumerDisclosureHtml',
        'created_on': 'createdOn',
        'declined_on': 'declinedOn',
        'documents': 'documents',
        'metadata': 'metadata',
        'settings': 'settings',
        'status': 'status',
        'version': 'version',
        'version_id': 'versionId',
        'version_number': 'versionNumber'
    }

    def __init__(self, account_id=None, agreed_on=None, agreement_id=None, agreement_url=None, clickwrap_id=None, client_user_id=None, consumer_disclosure_html=None, created_on=None, declined_on=None, documents=None, metadata=None, settings=None, status=None, version=None, version_id=None, version_number=None):  # noqa: E501
        """UserAgreementResponse - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._agreed_on = None
        self._agreement_id = None
        self._agreement_url = None
        self._clickwrap_id = None
        self._client_user_id = None
        self._consumer_disclosure_html = None
        self._created_on = None
        self._declined_on = None
        self._documents = None
        self._metadata = None
        self._settings = None
        self._status = None
        self._version = None
        self._version_id = None
        self._version_number = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if agreed_on is not None:
            self.agreed_on = agreed_on
        if agreement_id is not None:
            self.agreement_id = agreement_id
        if agreement_url is not None:
            self.agreement_url = agreement_url
        if clickwrap_id is not None:
            self.clickwrap_id = clickwrap_id
        if client_user_id is not None:
            self.client_user_id = client_user_id
        if consumer_disclosure_html is not None:
            self.consumer_disclosure_html = consumer_disclosure_html
        if created_on is not None:
            self.created_on = created_on
        if declined_on is not None:
            self.declined_on = declined_on
        if documents is not None:
            self.documents = documents
        if metadata is not None:
            self.metadata = metadata
        if settings is not None:
            self.settings = settings
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if version_id is not None:
            self.version_id = version_id
        if version_number is not None:
            self.version_number = version_number

    @property
    def account_id(self):
        """Gets the account_id of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The account_id of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserAgreementResponse.

          # noqa: E501

        :param account_id: The account_id of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def agreed_on(self):
        """Gets the agreed_on of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The agreed_on of this UserAgreementResponse.  # noqa: E501
        :rtype: object
        """
        return self._agreed_on

    @agreed_on.setter
    def agreed_on(self, agreed_on):
        """Sets the agreed_on of this UserAgreementResponse.

          # noqa: E501

        :param agreed_on: The agreed_on of this UserAgreementResponse.  # noqa: E501
        :type: object
        """

        self._agreed_on = agreed_on

    @property
    def agreement_id(self):
        """Gets the agreement_id of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The agreement_id of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._agreement_id

    @agreement_id.setter
    def agreement_id(self, agreement_id):
        """Sets the agreement_id of this UserAgreementResponse.

          # noqa: E501

        :param agreement_id: The agreement_id of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._agreement_id = agreement_id

    @property
    def agreement_url(self):
        """Gets the agreement_url of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The agreement_url of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._agreement_url

    @agreement_url.setter
    def agreement_url(self, agreement_url):
        """Sets the agreement_url of this UserAgreementResponse.

          # noqa: E501

        :param agreement_url: The agreement_url of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._agreement_url = agreement_url

    @property
    def clickwrap_id(self):
        """Gets the clickwrap_id of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The clickwrap_id of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._clickwrap_id

    @clickwrap_id.setter
    def clickwrap_id(self, clickwrap_id):
        """Sets the clickwrap_id of this UserAgreementResponse.

          # noqa: E501

        :param clickwrap_id: The clickwrap_id of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._clickwrap_id = clickwrap_id

    @property
    def client_user_id(self):
        """Gets the client_user_id of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The client_user_id of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_user_id

    @client_user_id.setter
    def client_user_id(self, client_user_id):
        """Sets the client_user_id of this UserAgreementResponse.

          # noqa: E501

        :param client_user_id: The client_user_id of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._client_user_id = client_user_id

    @property
    def consumer_disclosure_html(self):
        """Gets the consumer_disclosure_html of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The consumer_disclosure_html of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._consumer_disclosure_html

    @consumer_disclosure_html.setter
    def consumer_disclosure_html(self, consumer_disclosure_html):
        """Sets the consumer_disclosure_html of this UserAgreementResponse.

          # noqa: E501

        :param consumer_disclosure_html: The consumer_disclosure_html of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._consumer_disclosure_html = consumer_disclosure_html

    @property
    def created_on(self):
        """Gets the created_on of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The created_on of this UserAgreementResponse.  # noqa: E501
        :rtype: object
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this UserAgreementResponse.

          # noqa: E501

        :param created_on: The created_on of this UserAgreementResponse.  # noqa: E501
        :type: object
        """

        self._created_on = created_on

    @property
    def declined_on(self):
        """Gets the declined_on of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The declined_on of this UserAgreementResponse.  # noqa: E501
        :rtype: object
        """
        return self._declined_on

    @declined_on.setter
    def declined_on(self, declined_on):
        """Sets the declined_on of this UserAgreementResponse.

          # noqa: E501

        :param declined_on: The declined_on of this UserAgreementResponse.  # noqa: E501
        :type: object
        """

        self._declined_on = declined_on

    @property
    def documents(self):
        """Gets the documents of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The documents of this UserAgreementResponse.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this UserAgreementResponse.

          # noqa: E501

        :param documents: The documents of this UserAgreementResponse.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def metadata(self):
        """Gets the metadata of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The metadata of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UserAgreementResponse.

          # noqa: E501

        :param metadata: The metadata of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def settings(self):
        """Gets the settings of this UserAgreementResponse.  # noqa: E501


        :return: The settings of this UserAgreementResponse.  # noqa: E501
        :rtype: DisplaySettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserAgreementResponse.


        :param settings: The settings of this UserAgreementResponse.  # noqa: E501
        :type: DisplaySettings
        """

        self._settings = settings

    @property
    def status(self):
        """Gets the status of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The status of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserAgreementResponse.

          # noqa: E501

        :param status: The status of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The version of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserAgreementResponse.

          # noqa: E501

        :param version: The version of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_id(self):
        """Gets the version_id of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The version_id of this UserAgreementResponse.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this UserAgreementResponse.

          # noqa: E501

        :param version_id: The version_id of this UserAgreementResponse.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def version_number(self):
        """Gets the version_number of this UserAgreementResponse.  # noqa: E501

          # noqa: E501

        :return: The version_number of this UserAgreementResponse.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this UserAgreementResponse.

          # noqa: E501

        :param version_number: The version_number of this UserAgreementResponse.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAgreementResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgreementResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
