# coding: utf-8

"""
    DocuSign Click API

    Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_click.client.configuration import Configuration


class ContainerStyles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'background_color': 'str',
        'border_color': 'str',
        'border_radius': 'str',
        'border_style': 'str',
        'border_width': 'str'
    }

    attribute_map = {
        'background_color': 'backgroundColor',
        'border_color': 'borderColor',
        'border_radius': 'borderRadius',
        'border_style': 'borderStyle',
        'border_width': 'borderWidth'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ContainerStyles - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._background_color = None
        self._border_color = None
        self._border_radius = None
        self._border_style = None
        self._border_width = None
        self.discriminator = None

        setattr(self, "_{}".format('background_color'), kwargs.get('background_color', None))
        setattr(self, "_{}".format('border_color'), kwargs.get('border_color', None))
        setattr(self, "_{}".format('border_radius'), kwargs.get('border_radius', None))
        setattr(self, "_{}".format('border_style'), kwargs.get('border_style', None))
        setattr(self, "_{}".format('border_width'), kwargs.get('border_width', None))

    @property
    def background_color(self):
        """Gets the background_color of this ContainerStyles.  # noqa: E501

        This will be restricted to values not equal to: 'transparent', 'none'  # noqa: E501

        :return: The background_color of this ContainerStyles.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this ContainerStyles.

        This will be restricted to values not equal to: 'transparent', 'none'  # noqa: E501

        :param background_color: The background_color of this ContainerStyles.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def border_color(self):
        """Gets the border_color of this ContainerStyles.  # noqa: E501

        Adjust the border color of the clickwrap surrouding container.  # noqa: E501

        :return: The border_color of this ContainerStyles.  # noqa: E501
        :rtype: str
        """
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        """Sets the border_color of this ContainerStyles.

        Adjust the border color of the clickwrap surrouding container.  # noqa: E501

        :param border_color: The border_color of this ContainerStyles.  # noqa: E501
        :type: str
        """

        self._border_color = border_color

    @property
    def border_radius(self):
        """Gets the border_radius of this ContainerStyles.  # noqa: E501

        Adjust the border radius of the clickwrap surrouding container.  # noqa: E501

        :return: The border_radius of this ContainerStyles.  # noqa: E501
        :rtype: str
        """
        return self._border_radius

    @border_radius.setter
    def border_radius(self, border_radius):
        """Sets the border_radius of this ContainerStyles.

        Adjust the border radius of the clickwrap surrouding container.  # noqa: E501

        :param border_radius: The border_radius of this ContainerStyles.  # noqa: E501
        :type: str
        """

        self._border_radius = border_radius

    @property
    def border_style(self):
        """Gets the border_style of this ContainerStyles.  # noqa: E501

        Adjust the border style of the clickwrap surrouding container.  # noqa: E501

        :return: The border_style of this ContainerStyles.  # noqa: E501
        :rtype: str
        """
        return self._border_style

    @border_style.setter
    def border_style(self, border_style):
        """Sets the border_style of this ContainerStyles.

        Adjust the border style of the clickwrap surrouding container.  # noqa: E501

        :param border_style: The border_style of this ContainerStyles.  # noqa: E501
        :type: str
        """

        self._border_style = border_style

    @property
    def border_width(self):
        """Gets the border_width of this ContainerStyles.  # noqa: E501

        Adjust the border width of the clickwrap surrouding container.  # noqa: E501

        :return: The border_width of this ContainerStyles.  # noqa: E501
        :rtype: str
        """
        return self._border_width

    @border_width.setter
    def border_width(self, border_width):
        """Sets the border_width of this ContainerStyles.

        Adjust the border width of the clickwrap surrouding container.  # noqa: E501

        :param border_width: The border_width of this ContainerStyles.  # noqa: E501
        :type: str
        """

        self._border_width = border_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerStyles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerStyles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerStyles):
            return True

        return self.to_dict() != other.to_dict()
