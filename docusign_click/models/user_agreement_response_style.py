# coding: utf-8

"""
    DocuSign Click API

    Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_click.client.configuration import Configuration


class UserAgreementResponseStyle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agree_button': 'AgreeButtonStyles',
        'agreement_statement': 'AgreementStatementStyles',
        'container': 'ContainerStyles',
        'disclosure_link': 'DisclosureLinkStyles',
        'document_link': 'DocumentLinkStyles',
        'header': 'HeaderStyles',
        'scroll_control': 'str'
    }

    attribute_map = {
        'agree_button': 'agreeButton',
        'agreement_statement': 'agreementStatement',
        'container': 'container',
        'disclosure_link': 'disclosureLink',
        'document_link': 'documentLink',
        'header': 'header',
        'scroll_control': 'scrollControl'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """UserAgreementResponseStyle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agree_button = None
        self._agreement_statement = None
        self._container = None
        self._disclosure_link = None
        self._document_link = None
        self._header = None
        self._scroll_control = None
        self.discriminator = None

        setattr(self, "_{}".format('agree_button'), kwargs.get('agree_button', None))
        setattr(self, "_{}".format('agreement_statement'), kwargs.get('agreement_statement', None))
        setattr(self, "_{}".format('container'), kwargs.get('container', None))
        setattr(self, "_{}".format('disclosure_link'), kwargs.get('disclosure_link', None))
        setattr(self, "_{}".format('document_link'), kwargs.get('document_link', None))
        setattr(self, "_{}".format('header'), kwargs.get('header', None))
        setattr(self, "_{}".format('scroll_control'), kwargs.get('scroll_control', None))

    @property
    def agree_button(self):
        """Gets the agree_button of this UserAgreementResponseStyle.  # noqa: E501

        Control the display of the Agree button.  # noqa: E501

        :return: The agree_button of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: AgreeButtonStyles
        """
        return self._agree_button

    @agree_button.setter
    def agree_button(self, agree_button):
        """Sets the agree_button of this UserAgreementResponseStyle.

        Control the display of the Agree button.  # noqa: E501

        :param agree_button: The agree_button of this UserAgreementResponseStyle.  # noqa: E501
        :type: AgreeButtonStyles
        """

        self._agree_button = agree_button

    @property
    def agreement_statement(self):
        """Gets the agreement_statement of this UserAgreementResponseStyle.  # noqa: E501

        Control the display of the agreement statement.  # noqa: E501

        :return: The agreement_statement of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: AgreementStatementStyles
        """
        return self._agreement_statement

    @agreement_statement.setter
    def agreement_statement(self, agreement_statement):
        """Sets the agreement_statement of this UserAgreementResponseStyle.

        Control the display of the agreement statement.  # noqa: E501

        :param agreement_statement: The agreement_statement of this UserAgreementResponseStyle.  # noqa: E501
        :type: AgreementStatementStyles
        """

        self._agreement_statement = agreement_statement

    @property
    def container(self):
        """Gets the container of this UserAgreementResponseStyle.  # noqa: E501

        Control the overall clickwrap container and inherited styles such as font.  # noqa: E501

        :return: The container of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: ContainerStyles
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this UserAgreementResponseStyle.

        Control the overall clickwrap container and inherited styles such as font.  # noqa: E501

        :param container: The container of this UserAgreementResponseStyle.  # noqa: E501
        :type: ContainerStyles
        """

        self._container = container

    @property
    def disclosure_link(self):
        """Gets the disclosure_link of this UserAgreementResponseStyle.  # noqa: E501

        Control the display of the disclosure link.  # noqa: E501

        :return: The disclosure_link of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: DisclosureLinkStyles
        """
        return self._disclosure_link

    @disclosure_link.setter
    def disclosure_link(self, disclosure_link):
        """Sets the disclosure_link of this UserAgreementResponseStyle.

        Control the display of the disclosure link.  # noqa: E501

        :param disclosure_link: The disclosure_link of this UserAgreementResponseStyle.  # noqa: E501
        :type: DisclosureLinkStyles
        """

        self._disclosure_link = disclosure_link

    @property
    def document_link(self):
        """Gets the document_link of this UserAgreementResponseStyle.  # noqa: E501

        Control the display of the agreement statement.  # noqa: E501

        :return: The document_link of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: DocumentLinkStyles
        """
        return self._document_link

    @document_link.setter
    def document_link(self, document_link):
        """Sets the document_link of this UserAgreementResponseStyle.

        Control the display of the agreement statement.  # noqa: E501

        :param document_link: The document_link of this UserAgreementResponseStyle.  # noqa: E501
        :type: DocumentLinkStyles
        """

        self._document_link = document_link

    @property
    def header(self):
        """Gets the header of this UserAgreementResponseStyle.  # noqa: E501

        Control the display of the header.  # noqa: E501

        :return: The header of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: HeaderStyles
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this UserAgreementResponseStyle.

        Control the display of the header.  # noqa: E501

        :param header: The header of this UserAgreementResponseStyle.  # noqa: E501
        :type: HeaderStyles
        """

        self._header = header

    @property
    def scroll_control(self):
        """Gets the scroll_control of this UserAgreementResponseStyle.  # noqa: E501

        Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap `format` is `inline`.  # noqa: E501

        :return: The scroll_control of this UserAgreementResponseStyle.  # noqa: E501
        :rtype: str
        """
        return self._scroll_control

    @scroll_control.setter
    def scroll_control(self, scroll_control):
        """Sets the scroll_control of this UserAgreementResponseStyle.

        Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap `format` is `inline`.  # noqa: E501

        :param scroll_control: The scroll_control of this UserAgreementResponseStyle.  # noqa: E501
        :type: str
        """
        allowed_values = ["browser", "fill_parent"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scroll_control not in allowed_values):
            raise ValueError(
                "Invalid value for `scroll_control` ({0}), must be one of {1}"  # noqa: E501
                .format(scroll_control, allowed_values)
            )

        self._scroll_control = scroll_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAgreementResponseStyle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgreementResponseStyle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAgreementResponseStyle):
            return True

        return self.to_dict() != other.to_dict()
